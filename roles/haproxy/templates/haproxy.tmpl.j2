{% raw %}
global
    log /dev/log local0
    maxconn {{or (key "service/haproxy/maxconn") 1000000}}
    nbproc 4
    cpu-map 1 0
    cpu-map 2 1
    cpu-map 3 2
    cpu-map 4 3

defaults
    mode http
    maxconn 2000
    log global
    option httplog
    timeout connect {{or (key "service/haproxy/timeouts/connect") "30s"}}
    timeout client {{or (key "service/haproxy/timeouts/client") "60s"}}
    timeout server {{or (key "service/haproxy/timeouts/server") "60s"}}
    timeout queue {{or (key "service/haproxy/timeouts/queue") "60s"}}
    timeout tunnel {{or (key "service/haproxy/timeouts/tunnel") "30s"}}
    timeout http-request {{or (key "service/haproxy/timeouts/http-request") "30s"}}
    timeout http-keep-alive {{or (key "service/haproxy/timeouts/http-keep-alive") "30s"}}
    option redispatch
    balance roundrobin

# https://www.datadoghq.com/blog/how-to-collect-haproxy-metrics/
listen stats :9000
    mode http
    stats enable
    stats hide-version
    stats realm Haproxy\ Statistics
    stats uri /haproxy_stats
  {% endraw %}
    stats auth {{ haproxy_username }}:{{ haproxy_password }}

{% raw %}
# frontend used to return health status without requiring SSL
frontend haproxy_status
    bind 0.0.0.0:34180      # 34180 means EALTH ;)
    # create a status URI in /haproxy_status that will return
    # a 200 is backend is healthy, and 503 if it isn't. This
    # URI is queried by the ELB.
    acl backend_dead nbsrv(consul_backend) lt 1
    monitor-uri /haproxy_status
    monitor fail if backend_dead

frontend www
    bind *:80
    maxconn 30000
    mode http
    bind-process 1 2 3 4
    default_backend nodejs-express_backend

    # Generated automatically by consul-template
{{range services}}
    acl host_{{.Name}} hdr(host) -i {{.Name}}.{{env "HAPROXY_DOMAIN"}}
    use_backend {{.Name}}_backend if host_{{.Name}}
{{end}}

{{range services}}
backend {{.Name}}_backend
{{range service .Name}}
   server {{.Node}} {{.Address}}:{{.Port}}{{end}}
{{end}}
{% endraw %}
